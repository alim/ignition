var search_data = {"index":{"searchIndex":["ability","account","accountscontroller","admincontroller","applicationcontroller","cancan","mongoid","errors","applicationhelper","contact","contactmailer","groupshelper","homecontroller","oops","organization","organizationmailer","organizational","classmethods","organizationscontroller","project","projectscontroller","projectshelper","subscription","subscriptionscontroller","subscriptionshelper","user","usermailer","userroles","userscontroller","usershelper","about()","access_denied()","active()","admin?()","after_sign_in_path_for()","after_sign_out_path_for()","cancel_subscription()","configure_permitted_parameters()","contact()","contact_message()","create()","create()","create()","create()","create()","create_contact()","create_notify()","create_with_owner()","create_with_user()","customer?()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","display_alert()","display_error()","edit()","edit()","edit()","edit()","edit()","filter_by()","get_customer()","get_default_card()","get_owner_email()","group_list()","handle_account_errors()","help()","in_organization()","index()","index()","index()","index()","index()","index()","invite_member()","is_valid()","layout_by_resource()","load_customer_info()","logger_debugger()","lookup_users()","managed_classes()","member_email()","members_list()","missing_document()","new()","new()","new()","new()","new()","new()","new()","new_account()","notify()","oops()","password_reset()","persisted?()","plan_str()","project_list()","relate_and_notify()","relate_classes()","relate_to_organization()","remove_members()","resource_list()","role_str()","save_with_stripe()","search_by()","selection_options()","set_menu_active()","set_user()","show()","show()","show()","show()","status_str()","stripe_error_handler()","sub_create()","subscribe()","subscription_plans()","support()","title()","unrelate_classes()","update()","update()","update()","update()","update()","update_customer_info()","update_with_stripe()","user_search_options()","readme"],"longSearchIndex":["ability","account","accountscontroller","admincontroller","applicationcontroller","applicationcontroller::cancan","applicationcontroller::mongoid","applicationcontroller::mongoid::errors","applicationhelper","contact","contactmailer","groupshelper","homecontroller","oops","organization","organizationmailer","organizational","organizational::classmethods","organizationscontroller","project","projectscontroller","projectshelper","subscription","subscriptionscontroller","subscriptionshelper","user","usermailer","userroles","userscontroller","usershelper","homecontroller#about()","applicationcontroller#access_denied()","applicationhelper#active()","userroles#admin?()","applicationcontroller#after_sign_in_path_for()","applicationcontroller#after_sign_out_path_for()","subscription#cancel_subscription()","applicationcontroller#configure_permitted_parameters()","homecontroller#contact()","contactmailer#contact_message()","accountscontroller#create()","organizationscontroller#create()","projectscontroller#create()","subscriptionscontroller#create()","userscontroller#create()","homecontroller#create_contact()","organization#create_notify()","organization::create_with_owner()","project::create_with_user()","userroles#customer?()","account#destroy()","accountscontroller#destroy()","organizationscontroller#destroy()","projectscontroller#destroy()","subscription#destroy()","subscriptionscontroller#destroy()","userscontroller#destroy()","oops#display_alert()","oops#display_error()","accountscontroller#edit()","organizationscontroller#edit()","projectscontroller#edit()","subscriptionscontroller#edit()","userscontroller#edit()","user::filter_by()","account#get_customer()","account#get_default_card()","groupshelper#get_owner_email()","groupshelper#group_list()","accountscontroller#handle_account_errors()","admincontroller#help()","organizational::classmethods#in_organization()","admincontroller#index()","homecontroller#index()","organizationscontroller#index()","projectscontroller#index()","subscriptionscontroller#index()","userscontroller#index()","organization#invite_member()","account#is_valid()","applicationcontroller#layout_by_resource()","account#load_customer_info()","subscription#logger_debugger()","organization#lookup_users()","organization#managed_classes()","organizationmailer#member_email()","organization#members_list()","applicationcontroller#missing_document()","ability::new()","accountscontroller#new()","contact::new()","organizationscontroller#new()","projectscontroller#new()","subscriptionscontroller#new()","userscontroller#new()","usermailer#new_account()","organizationscontroller#notify()","admincontroller#oops()","admincontroller#password_reset()","contact#persisted?()","subscription#plan_str()","projectshelper#project_list()","organization#relate_and_notify()","organization#relate_classes()","organizational#relate_to_organization()","organization#remove_members()","groupshelper#resource_list()","userroles#role_str()","account#save_with_stripe()","user::search_by()","applicationhelper#selection_options()","applicationcontroller#set_menu_active()","accountscontroller#set_user()","organizationscontroller#show()","projectscontroller#show()","subscriptionscontroller#show()","userscontroller#show()","account#status_str()","account#stripe_error_handler()","subscription#sub_create()","subscription#subscribe()","subscriptionshelper#subscription_plans()","homecontroller#support()","applicationhelper#title()","organization#unrelate_classes()","accountscontroller#update()","organizationscontroller#update()","projectscontroller#update()","subscriptionscontroller#update()","userscontroller#update()","account#update_customer_info()","account#update_with_stripe()","usershelper#user_search_options()",""],"info":[["Ability","","Ability.html","",""],["Account","","Account.html","","<p>The Account model is used to store the Stripe.com customer_id and the\ncurrent status of the account. …\n"],["AccountsController","","AccountsController.html","","<p>The Accounts controller manages the users interaction associated with\nsetting up a payment account.  …\n"],["AdminController","","AdminController.html","","<p>The admin controller provides the private facing user interface for the\napplication. It requires authentication/login …\n"],["ApplicationController","","ApplicationController.html","",""],["ApplicationController::CanCan","","ApplicationController/CanCan.html","",""],["ApplicationController::Mongoid","","ApplicationController/Mongoid.html","",""],["ApplicationController::Mongoid::Errors","","ApplicationController/Mongoid/Errors.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Contact","","Contact.html","","<p>This model is used to hold the contact request. It is not tied to a\ndatabase table, but just holds the …\n"],["ContactMailer","","ContactMailer.html","","<p>The contact mailer is for managing the contact form  request on the web\nservice.\n"],["GroupsHelper","","GroupsHelper.html","",""],["HomeController","","HomeController.html","","<p>The HomeController is responsible for presenting the public interface to\nthe web service. Most web services …\n"],["Oops","","Oops.html","","<p>The Oops module provides utility methods for handling redirection to an\nerror page. The module can be …\n"],["Organization","","Organization.html","","<p>The Organization class allows us to authorize access to resources related\nto an organization class.  …\n"],["OrganizationMailer","","OrganizationMailer.html","",""],["Organizational","","Organizational.html","","<p>The Organizational concern’s purpose is to add features associated with\nworking with the Organizational …\n"],["Organizational::ClassMethods","","Organizational/ClassMethods.html","","<p>CLASS METHODS —————————————————-\n"],["OrganizationsController","","OrganizationsController.html","","<p>The OrganizationsController is responsible for managing the actions\nassociated with managing user organizations …\n"],["Project","","Project.html","","<p>The Project model class represents an example primary resource for the\nservice. This model could be substituted …\n"],["ProjectsController","","ProjectsController.html","","<p>The ProjectsController class is responsible for managing project resources\nassociated with the web service. …\n"],["ProjectsHelper","","ProjectsHelper.html","",""],["Subscription","","Subscription.html","","<p>The Subcription model holds information about a subscription plan that will\nbe created on the Stripe.com …\n"],["SubscriptionsController","","SubscriptionsController.html","","<p>The SubscriptionsController is responsible for subscribing a customer to\nour web service. It depends …\n"],["SubscriptionsHelper","","SubscriptionsHelper.html","",""],["User","","User.html","","<p>The User model is responsible for holding information associated with a\nuser account. This model is then …\n"],["UserMailer","","UserMailer.html","",""],["UserRoles","","UserRoles.html","",""],["UsersController","","UsersController.html","","<p>The UsersController is the administrative controller for managing users of\nthe web service. It is targeted …\n"],["UsersHelper","","UsersHelper.html","",""],["about","HomeController","HomeController.html#method-i-about","()","<p>The about page will present a page for telling the customer about your web\nservice or company.\n"],["access_denied","ApplicationController","ApplicationController.html#method-i-access_denied","(exception)","<p>The access_denied method is the controller method for catching a CanCan\nexception for an unauthorized …\n"],["active","ApplicationHelper","ApplicationHelper.html#method-i-active","(path)","<p>The active method is a helper function that returns “active” or empty\nstring. It is used to …\n"],["admin?","UserRoles","UserRoles.html#method-i-admin-3F","()","<p>Returns true or false if user has admin role.\n"],["after_sign_in_path_for","ApplicationController","ApplicationController.html#method-i-after_sign_in_path_for","(resource)","<p>The after_sign_in_path_for method will check to see if there the user needs\nto fill out their profile …\n"],["after_sign_out_path_for","ApplicationController","ApplicationController.html#method-i-after_sign_out_path_for","(resource)","<p>A Devise method override that redirects the user to the home_url after they\nhave signed out the system. …\n"],["cancel_subscription","Subscription","Subscription.html#method-i-cancel_subscription","(account_user)","<p>The cancel_subscription method cancels a Stripe subscription for a given\nuser.  The following parameter …\n"],["configure_permitted_parameters","ApplicationController","ApplicationController.html#method-i-configure_permitted_parameters","()","<p>Devise strong parameters method for allowing additional attributes to be\nmass updated in the User model. …\n"],["contact","HomeController","HomeController.html#method-i-contact","()","<p>The contact method presents a form for contacting us. The form then calls\nthe create_contact method for …\n"],["contact_message","ContactMailer","ContactMailer.html#method-i-contact_message","(contact)","<p>The standard contact request message.\n"],["create","AccountsController","AccountsController.html#method-i-create","()","<p>POST   /admin/users/:user_id/accounts(.:format)\n<p>The create method will update the account settings with …\n"],["create","OrganizationsController","OrganizationsController.html#method-i-create","()","<p>POST /organizations POST /organizations.json\n<p>The create method will create the organization add the current …\n"],["create","ProjectsController","ProjectsController.html#method-i-create","()","<p>POST /projects\n<p>The create method will create a new project and relate any selected groups\nthat the user …\n"],["create","SubscriptionsController","SubscriptionsController.html#method-i-create","()","<p>POST /subscriptions POST /subscriptions.json\n<p>The create method will fill out the subscription options …\n"],["create","UsersController","UsersController.html#method-i-create","()","<p>POST /admin/users\n<p>The create enables creation of a new user account by a service\nadministrator. Once a …\n"],["create_contact","HomeController","HomeController.html#method-i-create_contact","()","<p>The create_contact method uses a mailer class to generate an email message\nto us via our website.\n"],["create_notify","Organization","Organization.html#method-i-create_notify","()","<p>The create_notify method will look to see if members have been assigned to\nthe Group. For each email …\n"],["create_with_owner","Organization","Organization.html#method-c-create_with_owner","(org_params, owner)","<p>Create a new project and relate the user record to it.\n"],["create_with_user","Project","Project.html#method-c-create_with_user","(project_params, user)","<p>Create a new project and relate the user record to it.\n"],["customer?","UserRoles","UserRoles.html#method-i-customer-3F","()","<p>Returns true or false if user has customer role.\n"],["destroy","Account","Account.html#method-i-destroy","()","<p>The destory method overides the standard destory method for ActiveModel.\nThis version will delete Stripe.com …\n"],["destroy","AccountsController","AccountsController.html#method-i-destroy","()","<p>DELETE /admin/users/:user_id/accounts/:id(.:format)\n<p>The destroy method will destroy the account record …\n"],["destroy","OrganizationsController","OrganizationsController.html#method-i-destroy","()","<p>DELETE /organizations/1 DELETE /organizations/1.json\n<p>The standard destroy action with a call to unrelate …\n"],["destroy","ProjectsController","ProjectsController.html#method-i-destroy","()","<p>DELETE /projects/1 DELETE /projects/1.json\n<p>The destroy project method will delete the project, but does …\n"],["destroy","Subscription","Subscription.html#method-i-destroy","()","<p>The destroy method cancels a Stripe subscription for a given user and then\ndeletes the customer.\n<p>This …\n"],["destroy","SubscriptionsController","SubscriptionsController.html#method-i-destroy","()","<p>DELETE /subscriptions/1 DELETE /subscriptions/1.json\n<p>This method will cancel a Stripe subscription and …\n"],["destroy","UsersController","UsersController.html#method-i-destroy","()","<p>DELETE /admin/users/:id\n<p>The destory action will delete the user. The user model should also include\nany …\n"],["display_alert","Oops","Oops.html#method-i-display_alert","(args)","<p>The display_alert method will display an alert message to an error page. It\ntakes a hash as an argument, …\n"],["display_error","Oops","Oops.html#method-i-display_error","(args)","<p>The display_error method will display an error message to an error page. It\ntakes a hash as an argument, …\n"],["edit","AccountsController","AccountsController.html#method-i-edit","()","<p>GET    /admin/users/:user_id/accounts/:id/edit\n<p>The edit action will present the user with a form for editing …\n"],["edit","OrganizationsController","OrganizationsController.html#method-i-edit","()","<p>GET /organizations/1/edit\n<p>This action present the edit view with the list of resources that are\ncurrently …\n"],["edit","ProjectsController","ProjectsController.html#method-i-edit","()","<p>GET /projects/1/edit\n<p>The standard edit method will display the edit form and include the ability\nto select …\n"],["edit","SubscriptionsController","SubscriptionsController.html#method-i-edit","()","<p>GET /subscriptions/1/edit\n<p>Standard edit action and view. Instructions added to the view about\nupdating …\n"],["edit","UsersController","UsersController.html#method-i-edit","()","<p>GET /admin/users/:id\n<p>The edit action will display a standard edit form for user account.\n"],["filter_by","User","User.html#method-c-filter_by","(filter)","<p>Class method to filter by role\n"],["get_customer","Account","Account.html#method-i-get_customer","()","<p>The get_customer method retrieves the customer information from Stripe.com.\nIt then stores some of the …\n"],["get_default_card","Account","Account.html#method-i-get_default_card","(customer)","<p>The get_default_card is a method that will return the default card\nassociated with a customer account. …\n"],["get_owner_email","GroupsHelper","GroupsHelper.html#method-i-get_owner_email","(group)","<p>The get_owner is a view helper method that will return either the email\naddress of the group owner or …\n"],["group_list","GroupsHelper","GroupsHelper.html#method-i-group_list","(params)","<p>The group_list method will return a list of groups that are owned by the\nuser. If no groups are found …\n"],["handle_account_errors","AccountsController","AccountsController.html#method-i-handle_account_errors","(user, params)","<p>A helper method for setting the account instance variable.\n"],["help","AdminController","AdminController.html#method-i-help","()","<p>The help function will present a help page for the service.\n"],["in_organization","Organizational::ClassMethods","Organizational/ClassMethods.html#method-i-in_organization","(user)","<p>Returns all records that are either owned by the user or is managed by the\norganization that the user …\n"],["index","AdminController","AdminController.html#method-i-index","()","<p>The index action presents the dashboard or main landing page after logging\ninto the service.\n"],["index","HomeController","HomeController.html#method-i-index","()","<p>The index action will present the user with the primary landing page for\nthe service.\n"],["index","OrganizationsController","OrganizationsController.html#method-i-index","()","<p>GET /organizations GET /organizations.json\n<p>The index action will check to see if an organization is currently …\n"],["index","ProjectsController","ProjectsController.html#method-i-index","()","<p>GET /projects GET /projects.json\n<p>The index method displays the current users list of projects. If the …\n"],["index","SubscriptionsController","SubscriptionsController.html#method-i-index","()","<p>GET /subscriptions GET /subscriptions.json\n<p>The index method will only be available for service administrators …\n"],["index","UsersController","UsersController.html#method-i-index","()","<p>GET /admin/users\n<p>The index action will present a list of system users. It will allow the\nsystem administrator …\n"],["invite_member","Organization","Organization.html#method-i-invite_member","(user)","<p>The invite_member method will resend an membership notification to an\nexisting member. If the member …\n"],["is_valid","Account","Account.html#method-i-is_valid","(params)","<p>The is_valid helper method checks to make sure the user included\ncardholder_name, cardholder_email, and …\n"],["layout_by_resource","ApplicationController","ApplicationController.html#method-i-layout_by_resource","()","<p>Callback function to specify the layout based on the controller that is in\nuse.\n"],["load_customer_info","Account","Account.html#method-i-load_customer_info","(customer)","<p>This helper method is used to load card and customer information into the\ninstance variables for the …\n"],["logger_debugger","Subscription","Subscription.html#method-i-logger_debugger","(errors, stripe_error, customer_id, description)","\n<pre>return account_valid</pre>\n<p>end\n"],["lookup_users","Organization","Organization.html#method-i-lookup_users","()","<p>The lookup_user method will take an string of white-space separated email\naddresses and return a hash …\n"],["managed_classes","Organization","Organization.html#method-i-managed_classes","()","<p>The managed_classes method will returns a hash of classes managed by the\norganization. The hash keys …\n"],["member_email","OrganizationMailer","OrganizationMailer.html#method-i-member_email","(user, organization)","<p>The member_email method will notify a new member of a organization that\nhe/she has been added by the …\n"],["members_list","Organization","Organization.html#method-i-members_list","()","<p>The members_list method will parse the membership list of email addresses\ncheck them for valid email …\n"],["missing_document","ApplicationController","ApplicationController.html#method-i-missing_document","(exception)","<p>The missing_document method is the controller method for catching a Mongoid\nMongoid::Errors::DocumentNotFound …\n"],["new","Ability","Ability.html#method-c-new","(user)",""],["new","AccountsController","AccountsController.html#method-i-new","()","<p>GET    /admin/users/:user_id/accounts/new(.:format)\n<p>The new action will present a AJAX based form to user …\n"],["new","Contact","Contact.html#method-c-new","(attributes = {})","<p>INSTANCE METHODS ————————————————–\n"],["new","OrganizationsController","OrganizationsController.html#method-i-new","()","<p>GET /organizations/new\n<p>Since we support a resource based authorization system, the new method\nshould show …\n"],["new","ProjectsController","ProjectsController.html#method-i-new","()","<p>GET /projects/new\n<p>The new method will show the user a new project form. It will also lookup\nany groups …\n"],["new","SubscriptionsController","SubscriptionsController.html#method-i-new","()","<p>GET /subscriptions/new\n<p>This method will present the customer with a new subscription for, if the\ncustomer …\n"],["new","UsersController","UsersController.html#method-i-new","()","<p>GET /admin/users/new\n<p>The new action enables an administrator create a new user account. It\npresents a …\n"],["new_account","UserMailer","UserMailer.html#method-i-new_account","(user)","<p>Email for new user account. It will email the user their login, password, a\nlogin link, and a link to …\n"],["notify","OrganizationsController","OrganizationsController.html#method-i-notify","()","<p>PUT /organizations/1/notify\n<p>The notify method will resend a organization invite notification message to\n…\n"],["oops","AdminController","AdminController.html#method-i-oops","()","<p>Error action and view to display errors to the user.\n"],["password_reset","AdminController","AdminController.html#method-i-password_reset","()","<p>Password_reset presents the password reset page.\n"],["persisted?","Contact","Contact.html#method-i-persisted-3F","()",""],["plan_str","Subscription","Subscription.html#method-i-plan_str","()","<p>The plan_str returns a string that represents the name of the subscription\nplan.\n"],["project_list","ProjectsHelper","ProjectsHelper.html#method-i-project_list","(user)","<p>The project_list method will return a list of projects that are accessible\nby the user. If no projects …\n"],["relate_and_notify","Organization","Organization.html#method-i-relate_and_notify","()","<p>This utility method will notify organization members and relate associated\nclasses to the organization …\n"],["relate_classes","Organization","Organization.html#method-i-relate_classes","()","<p>The relate_classes method will relate instances of each class that\nbelongs_to an organization.\n"],["relate_to_organization","Organizational","Organizational.html#method-i-relate_to_organization","()","<p>Relate the current class to it’s organization, if it is present for the\nclass.\n"],["remove_members","Organization","Organization.html#method-i-remove_members","(members)","<p>The remove_member method will remove selected group members The parameter\nis a list of group members …\n"],["resource_list","GroupsHelper","GroupsHelper.html#method-i-resource_list","(params)","<p>The resource_list method will set an instance variable called @resources to\nhold an array of hashes. …\n"],["role_str","UserRoles","UserRoles.html#method-i-role_str","()","<p>The role_str returns the string representation of the role assigned to the\nuser.\n"],["save_with_stripe","Account","Account.html#method-i-save_with_stripe","(params)","<p>The save_with_stripe will save the account record and corresponding stripe\ncustomer_id in the database. …\n"],["search_by","User","User.html#method-c-search_by","(search_type, search_term)","<p>Class method to return the correct set of user records from a search\nrequest.\n"],["selection_options","ApplicationHelper","ApplicationHelper.html#method-i-selection_options","(selection_hash)","<p>The selection_options method generates a selection list array based on a\nhash that is pasted as the single …\n"],["set_menu_active","ApplicationController","ApplicationController.html#method-i-set_menu_active","()","<p>This before_filter method is responsible for setting a menu item to active.\nWe can add multiple check …\n"],["set_user","AccountsController","AccountsController.html#method-i-set_user","()","<p>Use callbacks to share common setup or constraints between actions. We do\nthe following actions:\n<p>Try to …\n"],["show","OrganizationsController","OrganizationsController.html#method-i-show","()","<p>GET /organizations/1 GET /organizations/1.json\n<p>Shows the organization information and the list of organization …\n"],["show","ProjectsController","ProjectsController.html#method-i-show","()","<p>GET /projects/1 GET /projects/1.json\n<p>The show method will show the project record. The corresponding view …\n"],["show","SubscriptionsController","SubscriptionsController.html#method-i-show","()","<p>GET /subscriptions/1 GET /subscriptions/1.json\n<p>The show method will display the list of subscription attributes …\n"],["show","UsersController","UsersController.html#method-i-show","()","<p>GET /admin/users/:id\n<p>The show action displays the user record and a subset of the fields. It\ndoes not …\n"],["status_str","Account","Account.html#method-i-status_str","()","<p>The status_str method returns the account status in string format\n"],["stripe_error_handler","Account","Account.html#method-i-stripe_error_handler","(stripe_error, status=nil)","<p>This helper method handles logging and setting stripe errors. It\n"],["sub_create","Subscription","Subscription.html#method-i-sub_create","(current_user, stripe_pl_id, coupon)",""],["subscribe","Subscription","Subscription.html#method-i-subscribe","(account_user, plan_id, coupon_code)","<p>The subscribe method creates or updates a Stripe subscription for a given\nuser. It then store some of …\n"],["subscription_plans","SubscriptionsHelper","SubscriptionsHelper.html#method-i-subscription_plans","()","<p>The subscription_plans is a view helper to list the available subscriptions\nthat are configured into …\n"],["support","HomeController","HomeController.html#method-i-support","()","<p>The support action will present a support page to the customer.\n"],["title","ApplicationHelper","ApplicationHelper.html#method-i-title","(page_title)","<p>A little helper method to display the page title. To use the method:\n\n<pre>&lt;% title &quot;your title here&quot; %&gt;</pre>\n"],["unrelate_classes","Organization","Organization.html#method-i-unrelate_classes","()","<p>The unrelate_classes method is responsible for disassociating all other\nclasses from the Organization …\n"],["update","AccountsController","AccountsController.html#method-i-update","()","<p>PUT or PATCH  /admin/users/:user_id/accounts/:id(.:format)\n<p>Updates an embedded account record for a user …\n"],["update","OrganizationsController","OrganizationsController.html#method-i-update","()","<p>PATCH/PUT /organizations/1\n<p>The update action allows the user to update the organization attributes,\nremove …\n"],["update","ProjectsController","ProjectsController.html#method-i-update","()","<p>PATCH/PUT /projects/1 PATCH/PUT /projects/1.json\n<p>The update will update the Project model object including …\n"],["update","SubscriptionsController","SubscriptionsController.html#method-i-update","()","<p>PATCH/PUT /subscriptions/1 PATCH/PUT /subscriptions/1.json\n"],["update","UsersController","UsersController.html#method-i-update","()","<p>UPDATE /admin/users/:id\n<p>The update method will modify the submitted attributes of the User record.\n"],["update_customer_info","Account","Account.html#method-i-update_customer_info","(customer, params)","<p>Little helper method to update customer record with stripe and contact\ninformation.\n"],["update_with_stripe","Account","Account.html#method-i-update_with_stripe","(params)","<p>The update with_stripe method will update the account record and\ncorresponding stripe customer_id in …\n"],["user_search_options","UsersHelper","UsersHelper.html#method-i-user_search_options","()","<p>The user_search_options method returns an options_for_select grouping for\nsearching users by email, first …\n"],["README","","README_rdoc.html","","<p>Ignition\n<p>The Ignition project is a small effort to provide a Quickstart framework\nfor building online …\n"]]}}