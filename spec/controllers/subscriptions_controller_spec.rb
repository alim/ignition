require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SubscriptionsController do
  include_context 'user_setup'
  include_context 'subscription_setup'

  let(:subscription_fake_customers) {
    create_subscriptions
    @fake_subscription = Subscription.last
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SubscriptionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each){
    signin_customer
		subject.current_user.should_not be_nil
		subscription_fake_customers

		# Add the subscription to the current signed in user
		@signed_in_user.subscriptions << @fake_subscription
  }

	after(:each) {
		delete_users
		Subscription.destroy_all
  }

  describe "GET index" do
    it "assigns all subscriptions as @subscriptions" do
      pending
      get :index
      assigns(:subscriptions).should be_present
    end
  end

  describe "GET show" do
    let(:show_params) {
      {id: @fake_subscription }
    }

    it "assigns the requested subscription as @subscription" do
     pending
      get :show, show_params
      assigns(:subscription).should eq(@fake_subscription)
    end
  end

  describe "GET new" do
    it "assigns a new subscription as @subscription" do
      pending
      get :new
      assigns(:subscription).should be_a_new(Subscription)
    end
  end

  describe "GET edit" do

    let(:edit_params){
      {
        id: @fake_subscription.id,
      }
    }

    it "assigns the requested subscription as @subscription" do
      pending
      get :edit, edit_params
      assigns(:subscription).should eq(@fake_subscription)
    end
  end

  describe "POST create" do
    let(:create_params) {
      {subscription:
        {
          stripe_plan_id: @fake_subscription.stripe_plan_id,
          cancel_at_period_end: @fake_subscription.cancel_at_period_end,
          quantity: @fake_subscription.quantity,
          sub_start: @fake_subscription.sub_start,
          sub_end: @fake_subscription.sub_end,
          status: @fake_subscription.status,
          canceled_at: @fake_subscription.canceled_at,
          current_period_start: @fake_subscription.current_period_start,
          current_period_end: @fake_subscription.current_period_end,
          trial_start: @fake_subscription.trial_start,
          trial_end: @fake_subscription.trial_end,
          user_id: @fake_subscription.user_id,
        }
      }
    }

    describe "with valid params", :vcr do
      it "creates a new Subscription" do
        pending
        expect {
          post :create, create_params
        }.to change(Subscription, :count).by(1)
      end

      it "assigns a newly created subscription as @subscription" do
        pending
        post :create, create_params
        assigns(:subscription).should be_a(Subscription)
        assigns(:subscription).should be_persisted
      end

      it "redirects to the created subscription" do
        pending
        post :create, create_params
        response.should redirect_to subscription_url(assigns(:subscription))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved subscription as @subscription" do
        pending
        # Trigger the behavior that occurs when invalid params are submitted
        Subscription.any_instance.stub(:save).and_return(false)
        post :create, create_params
        assigns(:subscription).should be_a_new(Subscription)
      end

      it "re-renders the 'new' template" do
        pending
        # Trigger the behavior that occurs when invalid params are submitted
        Subscription.any_instance.stub(:save).and_return(false)
        post :create, create_params
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    let(:new_fake_stripe_plan_id){ "999999999" }


    let(:update_params){
      {
        id: @fake_subscription.id,
        subscription: {
          stripe_plan_id: new_fake_stripe_plan_id,
        }
      }
    }

    describe "with valid params" do
      it "updates the requested subscription" do
        pending
        put :update, update_params
        assigns(:subscription).stripe_plan_id.should eq(new_fake_stripe_plan_id)
      end

      it "assigns the requested subscription as @subscription" do
        pending
        put :update, update_params
        assigns(:subscription).should eq(@fake_subscription)
      end

      it "redirects to the subscription" do
        pending
        put :update, update_params
        response.should redirect_to(@fake_subscription)
      end
    end

    describe "with invalid params" do
      it "assigns the subscription as @subscription" do
        pending
        Subscription.any_instance.stub(:save).and_return(false)
        put :update, update_params
        assigns(:subscription).should eq(@fake_subscription)
      end

      it "re-renders the 'edit' template" do
        pending
        # Trigger the behavior that occurs when invalid params are submitted
        Subscription.any_instance.stub(:save).and_return(false)
        put :update, update_params
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    let(:destroy_params){ {id: @fake_subscription.id } }

    it "destroys the requested subscription" do
      pending
      expect {
        delete :destroy, destroy_params
      }.to change(Subscription, :count).by(-1)
    end

    it "redirects to the subscriptions list" do
      pending
      delete :destroy, destroy_params
      response.should redirect_to(subscriptions_url)
    end
  end

end
